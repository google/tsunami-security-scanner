/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Data models utilized by the Tsunami Paylaod Generator
syntax = "proto3";

package tsunami.proto;

import 'google/protobuf/wrappers.proto';

option java_multiple_files = true;
option java_outer_classname = "PayloadGeneratorProtos";
option java_package = "com.google.tsunami.proto";
option go_package = "github.com/google/tsunami-security-scanner/proto";

// Attributes utilized by the PayloadGenerator to select a payload
message PayloadGeneratorConfig {
  // The type of vulnerability the detector is looking for
  enum VulnerabilityType {
    // Unspecified vulnerability type
    VULNERABILITY_TYPE_UNSPECIFIED = 0;
    // RCE which returns the output of the execution
    REFLECTIVE_RCE = 1;
    // RCE which does not return the output of the execution
    BLIND_RCE = 2;
    // Server-Side Request Forgery
    SSRF = 3;
    // Arbitrary File Write
    ARBITRARY_FILE_WRITE = 4;
    // RCE without output of the execution + File Read (needed to get
    // confirmation string)
    BLIND_RCE_FILE_READ = 5;
  }

  // The environment that processes the payload for execution e.g. a PHP-based
  // target likely wants a payload that is itself PHP code.
  enum InterpretationEnvironment {
    // Unspecified interpretation environment type
    INTERPRETATION_ENVIRONMENT_UNSPECIFIED = 0;
    // Payload is interpreted within a Linux shell environment
    LINUX_SHELL = 1;
    // Payload is interpreted wihin a Java compiler context
    JAVA = 2;
    // Payload is interpreted wihin a PHP VM context
    PHP = 3;
    // Interpretation environment doesn't matter
    INTERPRETATION_ANY = 4;
    // Payload is interpreted wihin crontab
    LINUX_ROOT_CRONTAB = 5;
    // Payload is interpreted wihin a Windows shell environment
    WINDOWS_SHELL = 6;
    // Payload is interpreted within a JSP shell environment
    JSP = 7;
  }

  // The actual runtime environment when the payload is run e.g. while a
  // PHP-based target wants a PHP-interpretation environment, the actual code
  // execution may happen via the Linux shell: exec(“echo \”this is running in
  // the system.\””).
  enum ExecutionEnvironment {
    // Unspecified execution environment type
    EXECUTION_ENVIRONMENT_UNSPECIFIED = 0;
    // Execute within the InterpretationEnvironment
    EXEC_INTERPRETATION_ENVIRONMENT = 1;
    // Execution environment doesn't matter
    EXEC_ANY = 2;
  }

  VulnerabilityType vulnerability_type = 2;

  InterpretationEnvironment interpretation_environment = 3;

  ExecutionEnvironment execution_environment = 4;
}

// Attributes of a payload. A detector can check these attributes to change its
// logic based on the payload type.
message PayloadAttributes {
  // Whether the payload uses the callback server
  bool uses_callback_server = 1;
}

enum PayloadValidationType {
  VALIDATION_TYPE_UNSPECIFIED = 0;

  VALIDATION_REGEX = 1;
}

// Container type for payload_definitions.yaml
message PayloadLibrary {
  repeated PayloadDefinition payloads = 1;
}

// Schema for each entry in payload_definitions.yaml
// Note: this message uses StringValue and BoolValue because we validate whether
// each payload definition in the yaml file has the correct fields present.
// Since empty proto fields are given default values (proto fields are not
// nullable), we use the wrapped types to check for actual presence.
message PayloadDefinition {
  // The human-readable string to identify the payload
  google.protobuf.StringValue name = 1;

  PayloadGeneratorConfig.InterpretationEnvironment interpretation_environment =
      2;
  PayloadGeneratorConfig.ExecutionEnvironment execution_environment = 3;

  // All vulnerability types this payload can be used for
  repeated PayloadGeneratorConfig.VulnerabilityType vulnerability_type = 4;

  // If true, payload_string must contain the $TSUNAMI_PAYLOAD_TOKEN_URL
  // token. Validation will automatically check against the callback server, so
  // the validation* fields do not need to be set.
  google.protobuf.BoolValue uses_callback_server = 5;

  // The actual payload command string. The following special tokens can be
  // used which will cause the framework to inject dynamic content into the
  // command:
  // - $TSUNAMI_PAYLOAD_TOKEN_URL: url for the callback server
  // - a random string, used to reduce false positives.
  google.protobuf.StringValue payload_string = 6;

  // The type of validation function for determining if the payload was
  // executed. Currently, only REGEX is supported.
  PayloadValidationType validation_type = 7;

  // Required if validation_type == REGEX. Must be compatible with
  // java.util.regex.Pattern. The string will first be preprocessed before
  // applied as a regex, replacing any of the following tokens with the
  // corresponding values supplied by the framework:
  // - $TSUNAMI_PAYLOAD_TOKEN_RANDOM: a random string, used to reduce false
  //   positives. The value is guaranteed to be the same as the value supplied
  //   to payload_string.
  google.protobuf.StringValue validation_regex = 8;
}
